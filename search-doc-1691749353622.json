[{"title":"Signal","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/Signal","content":"On this page Signal Handles all the tasks synchronously","keywords":""},{"title":"Proxy","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/Proxy","content":"On this page Proxy Proxy table","keywords":""},{"title":"Updating your module","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/r","content":"Updating your module If you want to update your module you can check the version on the script in the attributes tab and compare it to the one you have. If you have a version that goes up like this for e.g 1.2 -&gt; 1.3 then you are safe to upgrade it without breaking your current scripts. But if your version goes up like this 1.2 -&gt; 2.0 then you will probably have to edit the scripts that use the module. You don't have to update it but it will depreacate your old version as that version of the module is not being worked on. If you want to see the full code changes or the update log of the versions you can either check the discord or go to this link right here: https://github.com/NameTakenBonk/SuphisDataStoreModule/releases If you want to get the old version back all the older versions are saved on the github release page with the same link provieded here.","keywords":""},{"title":"Settup","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/setup","content":"Settup To start using this module it is very simple let me show you. To start you will need to get the module, there are various ways of doing it such as: Putting the source code into your game and then requiring. You can get it here: https://github.com/NameTakenBonk/SuphisDataStoreModule/releases local ServerStorage = game:GetService(&quot;ServerStorage&quot;) local DataStoreModule = require(ServerStorage.DataStoreModule) Requiring using an id local DataStoreModule = require(11671168253) ","keywords":""},{"title":"More player examples","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/v","content":"","keywords":""},{"title":"Setting the players data.​","type":1,"pageTitle":"More player examples","url":"/SuphisDataStoreModule/docs/v#setting-the-players-data","content":"If you still don't understand how to set the data of a player or anything then here is an example local dataStore = DataStoreModule.find(&quot;Player&quot;, player.UserId) if dataStore == nil then return end if dataStore.State ~= true then return end -- make sure the session is open or the value will never get saved dataStore.Value.Level += 1  "},{"title":"Developer Products Example​","type":1,"pageTitle":"More player examples","url":"/SuphisDataStoreModule/docs/v#developer-products-example","content":"This is a way to save what a player bought. local MarketplaceService = game:GetService(&quot;MarketplaceService&quot;) local DataStoreModule = require(11671168253) MarketplaceService.ProcessReceipt = function(receiptInfo) local dataStore = DataStoreModule.find(&quot;Player&quot;, receiptInfo.PlayerId) if dataStore == nil then return Enum.ProductPurchaseDecision.NotProcessedYet end if dataStore.State ~= true then return Enum.ProductPurchaseDecision.NotProcessedYet end -- convert the ProductId to a string as we are not allowed empty slots for numeric indexes local productId = tostring(receiptInfo.ProductId) -- Add 1 to to the productId in the DeveloperProducts table dataStore.Value.DeveloperProducts[productId] = (dataStore.Value.DeveloperProducts[productId] or 0) + 1 if dataStore:Save() == &quot;Saved&quot; then -- there was no errors lets grant the purchase return Enum.ProductPurchaseDecision.PurchaseGranted else -- the save failed lets make sure to remove the product or it might get saved in the next save interval dataStore.Value.DeveloperProducts[productId] -= 1 return Enum.ProductPurchaseDecision.NotProcessedYet end end  "},{"title":"TaskManager","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/TaskManager","content":"On this page TaskManager Handles all the tasks synchronously","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/intro","content":"","keywords":""},{"title":"What is Suphi's datastore module?​","type":1,"pageTitle":"Introduction","url":"/SuphisDataStoreModule/docs/intro#what-is-suphis-datastore-module","content":"Suphi's datastore module is a fast, lightweight datastore module for roblox with easy to use code. The module uses memomory store service to save the data. This module is maintained often and recieves help and updates. The module is beginner/intermediate friendly, by giving you direct access to the values that are saved, arleady having auto saving so all you have to do is just destroy the datastore object to cleanup and has a built in session locking. This modules has so much more features so you can see them here: "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/SuphisDataStoreModule/docs/intro#features","content":"Session locking Prevents multiple servers from opening the same datastore keyCross Server Communication Easily use MemoryStoreQueue to send data to the session ownerAuto save Automatically saves cached data to the datastore based on the saveinterval propertyBind To Close Automatically saves, closes and destroys all sessions when server starts to closeReconcile Fills in missing values from the template into the value propertyCompression Compress data to reduce character countMultiple script support Safe to interact with the same datastore object from multiple scriptsTask batching Tasks will be batched togever when possibleDirect value access Access the datastore value directly, module will never tamper with your data and will never leave any data in your datastore or memorystoreEasy to use Simple and elegantLightweight No RunService events and no while do loops 100% event based "},{"title":"Learning this module​","type":1,"pageTitle":"Introduction","url":"/SuphisDataStoreModule/docs/intro#learning-this-module","content":"Do you want to learn how to use this module? You can can continnue reading this or you can watch these video tutorials: BasicsAdvancedExtras "},{"title":"Creating your first data store","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/t","content":"","keywords":""},{"title":"Requiring​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#requiring","content":"First we got to get the module. local DataStoreModule = require(11671168253)  "},{"title":"Creating the data store​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#creating-the-data-store","content":"To create the data store itself you got to use the .new function. You must use this once per data store! -- Require the ModuleScript local DataStoreModule = require(11671168253) -- Find or create a datastore object local dataStore = DataStoreModule.new(&quot;Name&quot;, &quot;Key&quot;)  Let's go over the parameters real quick. The Name is the the name of the datastore as you can tell. The key of the datastore is like the key to your house there is only one pattern to your house key so as they key to your datastore, this can be shared for things like player data stores because you will most of the times will put the player's user id as the key. "},{"title":"Adding State Events​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#adding-state-events","content":"This is optional but this is great for debugging your code. There are 3 state events: &quot;Destroyed&quot; - This happens when the data store gets destroyed.&quot;Close&quot; - This happens when the data store closes it session.&quot;Open&quot; - This happens when the data store opens it sessions. To create the state changed code all we have to do is: dataStore.StateChanged:Connect(function(state) if state == nil then print(&quot;Destroyed&quot;, dataStore.Id) end if state == false then print(&quot;Closed &quot;, dataStore.Id) end if state == true then print(&quot;Open &quot;, dataStore.Id) end end)  This will fire every time the data store's state changes, so when the data store get's destroyed it will fire the event for the Destroyed event. "},{"title":"Openning the data store​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#openning-the-data-store","content":"We have got the data store so why not open it, so that's what exactly we will do. This is really simple to do which requires two lines of code!  -- Open the datastore session local response, responseData = dataStore:Open() -- If the session fails to open lets print why and return if response ~= &quot;Success&quot; then print(dataStore.Id, response, responseData) return end  Now we have opened the data store we can edit the data inside it. This module gives you direct access to the data by simply doing this: -- Set the datastore value dataStore.Value = &quot;Hello World!&quot;  So we have done all the basics to the data store now we can destroy the datastore an be done with the basics. -- Save, close and destroy the session dataStore:Destroy()  Here is the full code of this tutorial: -- Require the ModuleScript local DataStoreModule = require(11671168253) -- Find or create a datastore object local dataStore = DataStoreModule.new(&quot;Name&quot;, &quot;Key&quot;) -- Connect a function to the StateChanged event and print to the output when the state changes dataStore.StateChanged:Connect(function(state) if state == nil then print(&quot;Destroyed&quot;, dataStore.Id) end if state == false then print(&quot;Closed &quot;, dataStore.Id) end if state == true then print(&quot;Open &quot;, dataStore.Id) end end) -- Open the datastore session local response, responseData = dataStore:Open() -- If the session fails to open lets print why and return if response ~= &quot;Success&quot; then print(dataStore.Id, response, responseData) return end -- Set the datastore value dataStore.Value = &quot;Hello World!&quot; -- Save, close and destroy the session dataStore:Destroy()  -&gt; Next we will connec the module to the player so we can save things like coins or inventory! "},{"title":"Conecting the data store to the player.","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/u","content":"","keywords":""},{"title":"Setting things up​","type":1,"pageTitle":"Conecting the data store to the player.","url":"/SuphisDataStoreModule/docs/u#setting-things-up","content":"When creating a players data store you will need a template. A template is what will be the defualt value of a players data. This is important as you don't want to have to add the values later on, so by setting them to nil or 0 will be jsut fine. Here I will show you how it's done and talk a bit more about it. local DataStoreModule = require(11671168253) local template = { Level = 0, Coins = 0, Inventory = {}, DeveloperProducts = {}, }  As you can see the template is a table containing values inside of it. If you want when the player join the game for the first time to get a certain ammount of coins you can do that with templates. It's also a good way of setting up the player. This is usefull if you want to add more values to every player, so for e.g if you want to add gems but then when you add it you will have to check if the player has then you will have tp decide to add it and all, the template will cover that by jsut adding the gems value into the table. "},{"title":"State changed setup​","type":1,"pageTitle":"Conecting the data store to the player.","url":"/SuphisDataStoreModule/docs/u#state-changed-setup","content":"We already went through the state changed but with state changed we can also add a retrying ability. If a player's data store fails to open then you can add a retry to open it with state changed. local function StateChanged(state, dataStore) while dataStore.State == false do -- Keep trying to re-open if the state is closed if dataStore:Open(template) ~= &quot;Success&quot; then task.wait(6) end end end  The function takes in two parameters the state and the data store. it creates a while loop which loops until the data store opens successfully. Then the if statement opens the datastore and if it's not successfull then it will wait another 6 seconds to retry. "},{"title":"Player events​","type":1,"pageTitle":"Conecting the data store to the player.","url":"/SuphisDataStoreModule/docs/u#player-events","content":"Now we will have to actaully make the data store itself for the player. To do that we will connect two functions to two player events to either destroy the data store or to open it. You will not have to manually to save the data as it's built into the module! Anyways let's code in the events. game.Players.PlayerAdded:Connect(function(player) local dataStore = DataStoreModule.new(&quot;Player&quot;, player.UserId) dataStore.StateChanged:Connect(StateChanged) StateChanged(dataStore.State, dataStore) end)  So here we check when a player join and connect a function with it. then we create a new data store with the name of &quot;Player&quot; and put in their user id as their key. After that we connect the data store's event StateChanged to the StateChanged function we made earlier, this will open the data store. Now we will need to add a way to cleanup the data store once the player leaves so the data stores wont pile up in a server or create a session lock(Only allows one session of the data store per server). game.Players.PlayerRemoving:Connect(function(player) local dataStore = DataStoreModule.find(&quot;Player&quot;, player.UserId) if dataStore ~= nil then dataStore:Destroy() end -- If the player leaves datastore object is destroyed allowing the retry loop to stop end)  Now you should be done. If you want to edit the values of the player data all you will need to do is get the data store by opening it not creating a new one with .new() and using the data store varible to do Datastore.Value.Coins = x. "},{"title":"Full Source code:​","type":1,"pageTitle":"Conecting the data store to the player.","url":"/SuphisDataStoreModule/docs/u#full-source-code","content":"local DataStoreModule = require(11671168253) local template = { Level = 0, Coins = 0, Inventory = {}, DeveloperProducts = {}, } local function StateChanged(state, dataStore) while dataStore.State == false do -- Keep trying to re-open if the state is closed if dataStore:Open(template) ~= &quot;Success&quot; then task.wait(6) end end end game.Players.PlayerAdded:Connect(function(player) local dataStore = DataStoreModule.new(&quot;Player&quot;, player.UserId) dataStore.StateChanged:Connect(StateChanged) StateChanged(dataStore.State, dataStore) end) game.Players.PlayerRemoving:Connect(function(player) local dataStore = DataStoreModule.find(&quot;Player&quot;, player.UserId) if dataStore ~= nil then dataStore:Destroy() end -- If the player leaves datastore object is destroyed allowing the retry loop to stop end)  -&gt; If you wnat more player examples then continue on! "},{"title":"DataStore","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/DataStore","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#properties","content":" "},{"title":"Value​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Value","content":"&lt;/&gt; DataStore.Value: any Value of datastore print(DataStore.Value.Test)   "},{"title":"Metedata​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Metedata","content":"&lt;/&gt; DataStore.Metedata: {[string]: any} Metadata associated with the key  "},{"title":"UserIds​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#UserIds","content":"&lt;/&gt; DataStore.UserIds: {any} An array of UserIds associated with the key  "},{"title":"SaveInterval​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveInterval","content":"&lt;/&gt; DataStore.SaveInterval: number | 30 Interval in seconds the datastore will automatically save (set to 0 to disable automatic saving)  "},{"title":"SaveDelay​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveDelay","content":"&lt;/&gt; DataStore.SaveDelay: number | 0 Delay between saves  "},{"title":"LockInterval​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#LockInterval","content":"&lt;/&gt; DataStore.LockInterval: number | 60 Interval in seconds the memorystore will update the session lock  "},{"title":"LockAttempts​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#LockAttempts","content":"&lt;/&gt; DataStore.LockAttempts: number | 5 How many times the memorystore needs to fail before the session closes  "},{"title":"SaveOnClose​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveOnClose","content":"&lt;/&gt; DataStore.SaveOnClose: boolean | true Automatically save the data when the session is closed or destroyed  "},{"title":"Id​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Id","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Id: string | &quot;Name/Scope/Key&quot; Identifying string  "},{"title":"UniqueId​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#UniqueId","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.UniqueId: string | &quot;8-4-4-4-12&quot; Unique identifying string  "},{"title":"Key​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Key","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Key: string | &quot;Key&quot; Key used for the datastore  "},{"title":"State​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#State","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.State: boolean? | false Current state of the session nil = Destroyed false = Closed true = Open  "},{"title":"Hidden​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Hidden","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Hidden: boolean | false/true Set to true if this session was created by the hidden constructor  "},{"title":"AttemptsRemaining​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#AttemptsRemaining","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.AttemptsRemaining: number | 0 How many memorystore attempts remaining before the session closes  "},{"title":"CreatedTime​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CreatedTime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CreatedTime: number | 0 Number of milliseconds from epoch to when the datastore was created  "},{"title":"CreatedTime​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CreatedTime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CreatedTime: number | 0 Number of milliseconds from epoch to when the datastore was updated  "},{"title":"Version​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Version","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Version: string | &quot;&quot; Unique identifying string of the current datastore save  "},{"title":"CompressedValue​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CompressedValue","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CompressedValue: string | &quot;&quot; Compressed string that is updated before every save if compression is enabled by setting dataStore.Metadata.Compress = {[&quot;Level&quot;] = 2, [&quot;Decimals&quot;] = 3, [&quot;Safety&quot;] = true} Level = 1 (allows mixed tables), Level = 2 (does not allow mixed tables but compresses arrays better), Decimals = amount of decimal places saved, Safety = replace delete character from strings "},{"title":"Functions​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#functions","content":" "},{"title":"Open​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Open","content":"&lt;/&gt; DataStore:Open( proxy: table, template: table ) → response: Enum | &quot;Success&quot; | &quot;Error&quot;  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Open failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Read​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Read","content":"&lt;/&gt; DataStore:Read( proxy: table, template: table ) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Read failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Save​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Save","content":"&lt;/&gt; DataStore:Save(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Save failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Close​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Close","content":"&lt;/&gt; DataStore:Close(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Close failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Destroy​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Destroy","content":"&lt;/&gt; DataStore:Destroy(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Destroy failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Queue​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Queue","content":"&lt;/&gt; DataStore:Queue( proxy: table, value: any, expiration: number, priority: number ) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Queue failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore &quot;Attempt to Destroy failed: Passed value is not nil or number&quot;\tThis happens because you passed expiration as not a number &quot;Attempt to Destroy failed: Passed value is not nil or number&quot;\tThis happens because you passed priorty as not a number  "},{"title":"Remove​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Remove","content":"&lt;/&gt; DataStore:Remove( proxy: table, id: string ) → response: Enum  Removes values from the MemoryStoreQueue "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Remove failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore &quot;Attempt to RemoveQueue failed: Passed value is not a string&quot;\tThis happens because you passed id as not a number &quot;Roblox memorystore error&quot;\tThis is happens if roblox returns a memorystore error.  "},{"title":"Clones​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Clones","content":"&lt;/&gt; DataStore:Clones(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Clone failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Reconcile​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Reconcile","content":"&lt;/&gt; DataStore:Reconcile( proxy: table, template: table ) → ()  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Reconcile failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Usage​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Usage","content":"&lt;/&gt; DataStore:Usage(proxy: table) → characters: number  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Usage failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore "}]