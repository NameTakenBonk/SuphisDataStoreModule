[{"title":"Proxy","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/Proxy","content":"On this page Proxy Proxy table","keywords":""},{"title":"Signal","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/Signal","content":"On this page Signal Handles all the tasks synchronously","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/intro","content":"","keywords":""},{"title":"What is Suphi's datastore module?​","type":1,"pageTitle":"Introduction","url":"/SuphisDataStoreModule/docs/intro#what-is-suphis-datastore-module","content":"Suphi's datastore module is a fast, lightweight datastore module for roblox with easy to use code. The module uses memomory store service to save the data. This module is maintained often and recieves help and updates. The module is beginner/intermediate friendly, by giving you direct access to the values that are saved, arleady having auto saving so all you have to do is just destroy the datastore object to cleanup and has a built in session locking. This modules has so much more features so you can see them here: "},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/SuphisDataStoreModule/docs/intro#features","content":"Session locking Prevents multiple servers from opening the same datastore keyCross Server Communication Easily use MemoryStoreQueue to send data to the session ownerAuto save Automatically saves cached data to the datastore based on the saveinterval propertyBind To Close Automatically saves, closes and destroys all sessions when server starts to closeReconcile Fills in missing values from the template into the value propertyCompression Compress data to reduce character countMultiple script support Safe to interact with the same datastore object from multiple scriptsTask batching Tasks will be batched togever when possibleDirect value access Access the datastore value directly, module will never tamper with your data and will never leave any data in your datastore or memorystoreEasy to use Simple and elegantLightweight No RunService events and no while do loops 100% event based "},{"title":"Settup","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/setup","content":"Settup To start using this module it is very simple let me show you. To start you will need to get the module, there are various ways of doing it such as: Putting the source code into your game and then requiring. You can get it here: https://github.com/NameTakenBonk/SuphisDataStoreModule/releases local ServerStorage = game:GetService(&quot;ServerStorage&quot;) local DataStoreModule = require(ServerStorage.DataStoreModule) Requiring using an id local DataStoreModule = require(11671168253) ","keywords":""},{"title":"Conecting the data store to the player.","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/u","content":"Conecting the data store to the player. To do!","keywords":""},{"title":"DataStore","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/DataStore","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#properties","content":" "},{"title":"Value​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Value","content":"&lt;/&gt; DataStore.Value: any Value of datastore print(DataStore.Value.Test)   "},{"title":"Metedata​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Metedata","content":"&lt;/&gt; DataStore.Metedata: {[string]: any} Metadata associated with the key  "},{"title":"UserIds​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#UserIds","content":"&lt;/&gt; DataStore.UserIds: {any} An array of UserIds associated with the key  "},{"title":"SaveInterval​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveInterval","content":"&lt;/&gt; DataStore.SaveInterval: number | 30 Interval in seconds the datastore will automatically save (set to 0 to disable automatic saving)  "},{"title":"SaveDelay​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveDelay","content":"&lt;/&gt; DataStore.SaveDelay: number | 0 Delay between saves  "},{"title":"LockInterval​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#LockInterval","content":"&lt;/&gt; DataStore.LockInterval: number | 60 Interval in seconds the memorystore will update the session lock  "},{"title":"LockAttempts​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#LockAttempts","content":"&lt;/&gt; DataStore.LockAttempts: number | 5 How many times the memorystore needs to fail before the session closes  "},{"title":"SaveOnClose​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#SaveOnClose","content":"&lt;/&gt; DataStore.SaveOnClose: boolean | true Automatically save the data when the session is closed or destroyed  "},{"title":"Id​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Id","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Id: string | &quot;Name/Scope/Key&quot; Identifying string  "},{"title":"UniqueId​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#UniqueId","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.UniqueId: string | &quot;8-4-4-4-12&quot; Unique identifying string  "},{"title":"Key​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Key","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Key: string | &quot;Key&quot; Key used for the datastore  "},{"title":"State​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#State","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.State: boolean? | false Current state of the session nil = Destroyed false = Closed true = Open  "},{"title":"Hidden​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Hidden","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Hidden: boolean | false/true Set to true if this session was created by the hidden constructor  "},{"title":"AttemptsRemaining​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#AttemptsRemaining","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.AttemptsRemaining: number | 0 How many memorystore attempts remaining before the session closes  "},{"title":"CreatedTime​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CreatedTime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CreatedTime: number | 0 Number of milliseconds from epoch to when the datastore was created  "},{"title":"CreatedTime​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CreatedTime","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CreatedTime: number | 0 Number of milliseconds from epoch to when the datastore was updated  "},{"title":"Version​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Version","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.Version: string | &quot;&quot; Unique identifying string of the current datastore save  "},{"title":"CompressedValue​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#CompressedValue","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; DataStore.CompressedValue: string | &quot;&quot; Compressed string that is updated before every save if compression is enabled by setting dataStore.Metadata.Compress = {[&quot;Level&quot;] = 2, [&quot;Decimals&quot;] = 3, [&quot;Safety&quot;] = true} Level = 1 (allows mixed tables), Level = 2 (does not allow mixed tables but compresses arrays better), Decimals = amount of decimal places saved, Safety = replace delete character from strings "},{"title":"Functions​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#functions","content":" "},{"title":"Open​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Open","content":"&lt;/&gt; DataStore:Open( proxy: table, template: table ) → response: Enum | &quot;Success&quot; | &quot;Error&quot;  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Open failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Read​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Read","content":"&lt;/&gt; DataStore:Read( proxy: table, template: table ) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Read failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Save​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Save","content":"&lt;/&gt; DataStore:Save(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Save failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Close​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Close","content":"&lt;/&gt; DataStore:Close(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Close failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Destroy​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Destroy","content":"&lt;/&gt; DataStore:Destroy(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Destroy failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Queue​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Queue","content":"&lt;/&gt; DataStore:Queue( proxy: table, value: any, expiration: number, priority: number ) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Queue failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore &quot;Attempt to Destroy failed: Passed value is not nil or number&quot;\tThis happens because you passed expiration as not a number &quot;Attempt to Destroy failed: Passed value is not nil or number&quot;\tThis happens because you passed priorty as not a number  "},{"title":"Remove​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Remove","content":"&lt;/&gt; DataStore:Remove( proxy: table, id: string ) → response: Enum  Removes values from the MemoryStoreQueue "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Remove failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore &quot;Attempt to RemoveQueue failed: Passed value is not a string&quot;\tThis happens because you passed id as not a number &quot;Roblox memorystore error&quot;\tThis is happens if roblox returns a memorystore error.  "},{"title":"Clones​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Clones","content":"&lt;/&gt; DataStore:Clones(proxy: table) → TaskManager  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Clone failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Reconcile​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Reconcile","content":"&lt;/&gt; DataStore:Reconcile( proxy: table, template: table ) → ()  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Reconcile failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore  "},{"title":"Usage​","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore#Usage","content":"&lt;/&gt; DataStore:Usage(proxy: table) → characters: number  "},{"title":"Errors","type":1,"pageTitle":"DataStore","url":"/SuphisDataStoreModule/api/DataStore##","content":"Type\tDescription&quot;Attempt to Usage failed: Passed value is not a DataStore&quot;\tThis happens because you passed a value that is not a Datastore "},{"title":"Creating your first data store","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/docs/t","content":"","keywords":""},{"title":"Requiring​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#requiring","content":"First we got to get the module. local DataStoreModule = require(11671168253)  "},{"title":"Creating the data store​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#creating-the-data-store","content":"To create the data store itself you got to use the .new function. You must use this once per data store! -- Require the ModuleScript local DataStoreModule = require(11671168253) -- Find or create a datastore object local dataStore = DataStoreModule.new(&quot;Name&quot;, &quot;Key&quot;)  Let's go over the parameters real quick. The Name is the the name of the datastore as you can tell. The key of the datastore is like the key to your house there is only one pattern to your house key so as they key to your datastore, this can be shared for things like player data stores because you will most of the times will put the player's user id as the key. "},{"title":"Adding State Events​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#adding-state-events","content":"This is optional but this is great for debugging your code. There are 3 state events: &quot;Destroyed&quot; - This happens when the data store gets destroyed.&quot;Close&quot; - This happens when the data store closes it session.&quot;Open&quot; - This happens when the data store opens it sessions. To create the state changed code all we have to do is: dataStore.StateChanged:Connect(function(state) if state == nil then print(&quot;Destroyed&quot;, dataStore.Id) end if state == false then print(&quot;Closed &quot;, dataStore.Id) end if state == true then print(&quot;Open &quot;, dataStore.Id) end end)  This will fire every time the data store's state changes, so when the data store get's destroyed it will fire the event for the Destroyed event. "},{"title":"Openning the data store​","type":1,"pageTitle":"Creating your first data store","url":"/SuphisDataStoreModule/docs/t#openning-the-data-store","content":"We have got the data store so why not open it, so that's what exactly we will do. This is really simple to do which requires two lines of code!  -- Open the datastore session local response, responseData = dataStore:Open() -- If the session fails to open lets print why and return if response ~= &quot;Success&quot; then print(dataStore.Id, response, responseData) return end  Now we have opened the data store we can edit the data inside it. This module gives you direct access to the data by simply doing this: -- Set the datastore value dataStore.Value = &quot;Hello World!&quot;  So we have done all the basics to the data store now we can destroy the datastore an be done with the basics. -- Save, close and destroy the session dataStore:Destroy()  Here is the full code of this tutorial: -- Require the ModuleScript local DataStoreModule = require(11671168253) -- Find or create a datastore object local dataStore = DataStoreModule.new(&quot;Name&quot;, &quot;Key&quot;) -- Connect a function to the StateChanged event and print to the output when the state changes dataStore.StateChanged:Connect(function(state) if state == nil then print(&quot;Destroyed&quot;, dataStore.Id) end if state == false then print(&quot;Closed &quot;, dataStore.Id) end if state == true then print(&quot;Open &quot;, dataStore.Id) end end) -- Open the datastore session local response, responseData = dataStore:Open() -- If the session fails to open lets print why and return if response ~= &quot;Success&quot; then print(dataStore.Id, response, responseData) return end -- Set the datastore value dataStore.Value = &quot;Hello World!&quot; -- Save, close and destroy the session dataStore:Destroy()  -&gt; Next we will connec the module to the player so we can save things like coins or inventory! "},{"title":"TaskManager","type":0,"sectionRef":"#","url":"/SuphisDataStoreModule/api/TaskManager","content":"On this page TaskManager Handles all the tasks synchronously","keywords":""}]