"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[942],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,f=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[u]="string"==typeof e?e:a,i[1]=d;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:3},i="Hidden",d={unversionedId:"Extras/hidden",id:"Extras/hidden",title:"Hidden",description:"Hidden is a way to create a session that cannot be found as the name suggests. But how can this be useful? Hidden can emulate servers. But First let's see how it works.",source:"@site/docs/Extras/hidden.md",sourceDirName:"Extras",slug:"/Extras/hidden",permalink:"/SuphisDataStoreModule/docs/Extras/hidden",draft:!1,editUrl:"https://github.com/NameTakenBonk/SuphisDataStoreModule/edit/master/docs/Extras/hidden.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Queing",permalink:"/SuphisDataStoreModule/docs/Extras/queuing"}},s={},l=[{value:"How it works",id:"how-it-works",level:2},{value:"2 news",id:"2-news",level:3},{value:"Adding Hidden",id:"adding-hidden",level:3}],c={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hidden"},"Hidden"),(0,a.kt)("p",null,"Hidden is a way to create a session that cannot be found as the name suggests. But how can this be useful? Hidden can emulate servers. But First let's see how it works."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"Let's create 3 different scripts and call the Script A, Script B, Script C. In each script there is going to be the same datastore but a different way to find it."),(0,a.kt)("h3",{id:"2-news"},"2 news"),(0,a.kt)("p",null,"For now we will do the same for two of the scripts; Script A and Script B."),(0,a.kt)("p",null,"We will do the same thing in both scripts but just change the print statement."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local DataStore = require(game.ServerStorage.DataStore)\nlocal dataStore = DataStore.new("Name", "Key")\n\nprint("A", dataStore.UniqueId) -- Put the script name here\n')),(0,a.kt)("p",null,"Now if you run the code you should see that the ids are the same from both of the scripts."),(0,a.kt)("h3",{id:"adding-hidden"},"Adding Hidden"),(0,a.kt)("p",null,"Next if add hidden we should see a different id. To show that hidden cannot be found with ",(0,a.kt)("inlineCode",{parentName:"p"},"find()")," we will use it in Script C."),(0,a.kt)("p",null,"In Script B or where you have the second ",(0,a.kt)("inlineCode",{parentName:"p"},".new()")," we will change it to ",(0,a.kt)("inlineCode",{parentName:"p"},"hidden"),". Now in script C we do the same thing as in any other script you have but you change it to ",(0,a.kt)("inlineCode",{parentName:"p"},".find()")," and we also add a ",(0,a.kt)("inlineCode",{parentName:"p"},"task.wait()")," before we do the find constuctor. You script should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'\n-- Script A\n\nlocal DataStore = require(game.ServerStorage.DataStore)\nlocal dataStore = DataStore.new("Name", "Key")\n\nprint("A", dataStore.UniqueId)\n\n-- Script B\n\nlocal DataStore = require(game.ServerStorage.DataStore)\nlocal dataStore = DataStore.hidden("Name", "Key")\n\nprint("B", dataStore.UniqueId)\n\n-- Script C\n\nlocal DataStore = require(game.ServerStorage.DataStore)\n\ntask.wait()\n\nlocal dataStore = DataStore.find("Name", "Key")\n\nprint("C", dataStore.UniqueId)\n\n')),(0,a.kt)("p",null,"Now when you run the code it should print out 2 of the same ones and 1 different id. This is because ",(0,a.kt)("inlineCode",{parentName:"p"},".find()")," cannot find the hidden but can find the ",(0,a.kt)("inlineCode",{parentName:"p"},".new()")),(0,a.kt)("p",null,"To be continued"))}p.isMDXComponent=!0}}]);