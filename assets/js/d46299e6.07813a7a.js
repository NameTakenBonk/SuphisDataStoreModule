"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[620],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>S});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=a,S=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(S,l(l({ref:t},c),{},{components:r})):n.createElement(S,l({ref:t},c))}));function S(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},15156:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(87462),a=(r(67294),r(3905));const o={},l="Compression",s={unversionedId:"w",id:"w",title:"Compression",description:"Compression can be very usefull for saving large ammounts of data. As memory store service is more limited of what it can store you can use compression ro lower the size of the data. Here I will show you a simple compression example.",source:"@site/docs/w.md",sourceDirName:".",slug:"/w",permalink:"/SuphisDataStoreModule/docs/w",draft:!1,editUrl:"https://github.com/NameTakenBonk/SuphisDataStoreModule/edit/master/docs/w.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"More player examples",permalink:"/SuphisDataStoreModule/docs/v"},next:{title:"Queing",permalink:"/SuphisDataStoreModule/docs/x"}},i={},u=[{value:"Setting things up",id:"setting-things-up",level:2},{value:"Enabling Compression",id:"enabling-compression",level:2},{value:"Checking the results",id:"checking-the-results",level:2},{value:"The full source code:",id:"the-full-source-code",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"compression"},"Compression"),(0,a.kt)("p",null,"Compression can be very usefull for saving large ammounts of data. As memory store service is more limited of what it can store you can use compression ro lower the size of the data. Here I will show you a simple compression example."),(0,a.kt)("h2",{id:"setting-things-up"},"Setting things up"),(0,a.kt)("p",null,"For this you need ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTPService")," to json encode the values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local httpService = game:GetService("HttpService")\n\nlocal ServerStorage = game:GetService("ServerStorage")\nlocal DataStoreModule = require(ServerStorage.DataStoreModule)\nlocal dataStore = DataStoreModule.new("name", "key")\nif dataStore:Open() ~= "Success" then return end\n')),(0,a.kt)("p",null,"We will also set up the data store itself here."),(0,a.kt)("h2",{id:"enabling-compression"},"Enabling Compression"),(0,a.kt)("p",null,"Now we will need to enable the compression:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'-- Enable compression\ndataStore.Metadata.Compress = {["Level"] = 2, ["Decimals"] = 3, ["Safety"] = true}\n')),(0,a.kt)("p",null,"Levels can be set to 1 or 2."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1 will allow mixed tables."),(0,a.kt)("li",{parentName:"ul"},"2 will not allow mixed tables but will compress arrays better")),(0,a.kt)("p",null,"Decimals will set the maximum number of decimals saved for numbers more decimals will use more data.\nSafety will scan your strings for the delete character ","[\x7f]"," and replace them with space ","[ ]",".\nSetting to false will save faster but you could break the datastore if you have the delete character in any of your keys/strings. Recommended to set safty to true if you save strings sent from the client"),(0,a.kt)("h2",{id:"checking-the-results"},"Checking the results"),(0,a.kt)("p",null,"So now we can check the results. Feel free to mess around with the settings to see the results."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'dataStore.Value = {\n    ["Number"] = 1234567891234.987,\n    ["String"] = "Hello World!",\n    ["Array"] = {1234567891234567, 2345678912345678, 3456789123456789, 4567891234567891, 5678912345678912}\n}\n\n-- save datastore to force the CompressedValue to update\ndataStore:Save()\n\nprint(dataStore.Value)\n-- print the datastore value\nprint(httpService:JSONEncode(dataStore.Value)) \n-- print the compressed value\nprint(httpService:JSONEncode(dataStore.CompressedValue))\n')),(0,a.kt)("p",null,"Your output should look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'11:38:40.301   \u25bc  {\n                    ["Array"] =  \u25bc  {\n                       [1] = 1234567891234567,\n                       [2] = 2345678912345678,\n                       [3] = 3456789123456789,\n                       [4] = 4567891234567891,\n                       [5] = 5678912345678912\n                    },\n                    ["Number"] = 1234567891234.987,\n                    ["String"] = "Hello World!"\n                 }  -  Server - Script:24\n  11:38:40.302  {"Number":1234567891234.987,"String":"Hello World!","Array":[1234567891234567,2345678912345678,3456789123456789,4567891234567891,5678912345678912]}  -  Server - Script:26\n  11:38:40.303  "*#Number\x7f)hLy&yaFJ#String\x7f#Hello World!\x7f#Array\x7f|>cGy&yaFJ>e~i~{QA31>4YzarcwI1>v{GMPQr22>mrCnt=mH2\x7f\x7f"  -  Server - Script:28\n  11:38:40.585  Requiring asset 6738245247.\n')),(0,a.kt)("h3",{id:"the-full-source-code"},"The full source code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local httpService = game:GetService("HttpService")\n\nlocal ServerStorage = game:GetService("ServerStorage")\nlocal DataStoreModule = require(ServerStorage.DataStoreModule)\nlocal dataStore = DataStoreModule.new("name", "key")\nif dataStore:Open() ~= "Success" then return end\n\n-- Enable compression\ndataStore.Metadata.Compress = {["Level"] = 2, ["Decimals"] = 3, ["Safety"] = true}\n\ndataStore.Value = {\n    ["Number"] = 1234567891234.987,\n    ["String"] = "Hello World!",\n    ["Array"] = {1234567891234567, 2345678912345678, 3456789123456789, 4567891234567891, 5678912345678912}\n}\n\n-- save datastore to force the CompressedValue to update\ndataStore:Save()\n\nprint(dataStore.Value)\n-- print the datastore value\nprint(httpService:JSONEncode(dataStore.Value)) \n-- print the compressed value\nprint(httpService:JSONEncode(dataStore.CompressedValue))\n')))}d.isMDXComponent=!0}}]);